
import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToGenerativePart = (base64Data: string, mimeType: string) => {
  return {
    inlineData: {
      data: base64Data.split(',')[1],
      mimeType,
    },
  };
};

export const generateImageComposition = async (
  modelImage: { data: string; mimeType: string },
  productImage: { data: string; mimeType: string },
  prompt: string
): Promise<string> => {
  try {
    const model = 'gemini-2.5-flash-image-preview';

    const modelImagePart = fileToGenerativePart(modelImage.data, modelImage.mimeType);
    const productImagePart = fileToGenerativePart(productImage.data, productImage.mimeType);

    const fullPrompt = `Task: Photo Composition.
    Instructions:
    1. Take the second image provided (the product) and realistically integrate it into the first image provided (the model and scene).
    2. Follow the user's creative direction for the placement and interaction: "${prompt}".
    3. Ensure the final image has realistic lighting, shadows, and perspective, making the product look like it was part of the original photoshoot.
    4. Do not add any text or watermarks to the image. Output only the final composed image.`;

    const response = await ai.models.generateContent({
      model: model,
      contents: {
        parts: [
          modelImagePart,
          productImagePart,
          { text: fullPrompt },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes = part.inlineData.data;
            const mimeType = part.inlineData.mimeType;
            return `data:${mimeType};base64,${base64ImageBytes}`;
        }
    }

    throw new Error("No image was generated by the AI.");

  } catch (error) {
    console.error("Error generating image composition:", error);
    throw new Error("Failed to generate the image. Please check the console for more details.");
  }
};
